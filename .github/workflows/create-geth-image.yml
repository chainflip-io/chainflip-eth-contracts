name: Create Geth Image
run-name: Creating Geth Image for ${{ inputs.tag }}-${{ inputs.genesis_validators }}-node${{ inputs.docker_image_tag_suffix }}

on:
  workflow_dispatch:
    inputs:
      image:
        description: Which image should we build?
        required: true
        default: "geth"
        type: choice
        options:
          - "geth"
          - "arb-geth"
      tag:
        description: Which tag should we deploy against?
        required: true
      genesis_validators:
        description: The aggregate key generated from generate-genesis-keys
        type: choice
        options:
          - "1"
          - "3"
      chainflip_backend_ref:
        description: The branch, tag or commit of chainflip-backend to use
        required: true
        default: "main"
      docker_image_tag_suffix:
        description: A suffix to append to the image tag
        required: false
        default: ""

jobs:
  build:
    runs-on: [self-hosted, linux, x64, ephemeral]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/geth-base
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{raw}}
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ci/docker/${{ inputs.image }}/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  create:
    runs-on: [self-hosted, linux, x64, ephemeral]
    env:
      IMAGE_TAG: ${{ inputs.tag }}-${{ inputs.genesis_validators }}-node${{ inputs.docker_image_tag_suffix }}
    outputs:
      image-tag: ${{ env.IMAGE_TAG }}
    needs:
      - build
    services:
      geth:
        image: ghcr.io/${{ github.repository }}/geth-base:latest
        ports:
          - 8545:8545
          - 8546:8546
          - 8551:8551
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.tag }}

      - name: Checkout chainflip-backend @ ${{ inputs.chainflip_backend_ref }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CF_GITHUB_BOT_TOKEN }}
          repository: chainflip-io/chainflip-backend
          path: chainflip-backend
          ref: ${{ inputs.chainflip_backend_ref }}

      - name: Fetch agg_key
        run: |
          echo "AGG_KEY=$(jq -r .eth_agg_key chainflip-backend/localnet/init/keyshare/${{ inputs.genesis_validators }}-node/agg_keys.json)" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Python virtualenv
        run: pip install virtualenv

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - run: npm install --global ganache-cli
      - run: npm install --global yarn
      - run: yarn
      - run: poetry install

      - name: Add the network
        run: poetry run brownie networks add Ethereum docker host=http://localhost:8545 chainid=10997

      - name: Deploy contracts
        env:
          SEED: test test test test test test test test test test test junk
          NUM_GENESIS_VALIDATORS: ${{ inputs.genesis_validators }}
          GOV_KEY: "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
          COMM_KEY: "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
          REDEMPTION_DELAY: "120"
          GENESIS_STAKE: "1000000000000000000000"
          DEPLOYER_ACCOUNT_INDEX: "0"
          DEPLOY_ARTEFACT_ID: "docker"
        run: poetry run brownie run deploy_contracts --network docker

      - name: Commit and push new geth image
        run: |
          CONTAINER=$(docker ps --format '{{.Names}}' | grep geth)
          echo "geth_container=$CONTAINER" >> $GITHUB_ENV
          docker commit $CONTAINER ghcr.io/chainflip-io/chainflip-eth-contracts/geth:${{ env.IMAGE_TAG }}
          docker push ghcr.io/chainflip-io/chainflip-eth-contracts/geth:${{ env.IMAGE_TAG }}

      - name: Copy initial Geth state
        run: |
          docker cp ${{ env.geth_container }}:/datadir ${{ github.workspace }}/datadir

      - name: Summary
        run: |
          CONTRACTS=$(jq . ./scripts/.artefacts/docker.json)
          echo "## Deployed Contracts for \`${{ inputs.genesis_validators }}-node\`" >> $GITHUB_STEP_SUMMARY
          echo "\`agg_key\` = \`${{ env.AGG_KEY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo "$CONTRACTS" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "## Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "\`ghcr.io/chainflip-io/chainflip-eth-contracts/geth:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Save agg key to file
        run: echo ${{ env.AGG_KEY }} > agg_key

      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.IMAGE_TAG }}
          path: |
            agg_key
            ./scripts/.artefacts/docker.json
            ${{ github.workspace }}/datadir

  build-arb:
    runs-on: [self-hosted, linux, x64, ephemeral]
    env:
      IMAGE_TAG: ${{ inputs.tag }}-${{ inputs.genesis_validators }}-node${{ inputs.docker_image_tag_suffix }}
      GETH_INITIAL_STATE_DIR: ci-geth-initial-state
      GETH_BASE_IMAGE: ghcr.io/chainflip-io/chainflip-eth-contracts/geth:${{ inputs.tag }}-${{ inputs.genesis_validators }}-node${{ inputs.docker_image_tag_suffix }}
    needs:
      - create
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout chainflip-io/nitro-testnode
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CF_GITHUB_BOT_TOKEN }}
          repository: chainflip-io/nitro-testnode
          path: nitro-testnode
          ref: feat/setup-from-scratch
          submodules: true

      - name: Checkout chainflip-backend @ ${{ inputs.chainflip_backend_ref }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CF_GITHUB_BOT_TOKEN }}
          repository: chainflip-io/chainflip-backend
          path: chainflip-backend
          ref: ${{ inputs.chainflip_backend_ref }}

      - name: Fetch agg_key
        run: |
          echo "AGG_KEY=$(jq -r .eth_agg_key chainflip-backend/localnet/init/keyshare/${{ inputs.genesis_validators }}-node/agg_keys.json)" >> $GITHUB_ENV
      - name: Download Geth Initial State
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.IMAGE_TAG }}
          path: ./nitro-testnode/${{ env.GETH_INITIAL_STATE_DIR }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update directory permissions
        working-directory: nitro-testnode
        run: |
          chown -R 1000:1000 ./${{ env.GETH_INITIAL_STATE_DIR }}

      - name: Update Docker user
        run: |
          sudo usermod -aG docker $USER
          newgrp docker

      - name: Build Arbitrum Network
        working-directory: nitro-testnode
        run: |
          ./test-node.bash --init --detach

      - name: Install Python virtualenv
        run: pip install virtualenv

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - run: npm install --global ganache-cli
      - run: npm install --global yarn
      - run: yarn
      - run: poetry install

      - name: Add the network
        run: poetry run brownie networks add Ethereum arb-l2 host=http://localhost:8547 chainid=412346

      - name: Deploy contracts
        env:
          SEED: indoor dish desk flag debris potato excuse depart ticket judge file exit # ARB Localnet Seed
          NUM_GENESIS_VALIDATORS: ${{ inputs.genesis_validators }}
          GOV_KEY: "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
          COMM_KEY: "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
          REDEMPTION_DELAY: "120"
          GENESIS_STAKE: "1000000000000000000000"
          DEPLOYER_ACCOUNT_INDEX: "0"
          DEPLOY_ARTEFACT_ID: "docker"
        run: poetry run brownie run deploy_contracts --network arb-l2

      - name: Stop Containers
        run: |
          docker stop $(docker ps -a -q)

      - name: Summary
        run: |
          CONTRACTS=$(jq . ./scripts/.artefacts/docker.json)
          echo "## Deployed L2 Contracts for \`${{ inputs.genesis_validators }}-node\`" >> $GITHUB_STEP_SUMMARY
          echo "\`agg_key\` = \`${{ env.AGG_KEY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo "$CONTRACTS" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "## Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "\`ghcr.io/chainflip-io/chainflip-eth-contracts/geth:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Save agg key to file
        run: echo ${{ env.AGG_KEY }} > agg_key

      - name: Update permissions
        run: |
          sudo chown -R $USER:$USER ./nitro-testnode/data
          sudo chmod -R 777 ./nitro-testnode/data

      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.IMAGE_TAG }}-localnet-initial-state
          path: |
            ${{ github.workspace }}/nitro-testnode/data

      - name: Clean Up docker containers 🧹
        if: always()
        working-directory: ./nitro-testnode
        continue-on-error: true
        run: |
          ls -laR ./data
          docker ps -a
          docker compose logs
          docker compose down --rmi all --volumes --remove-orphans
